//
//  SelectCountriesWorker.swift
//  CleanSwiftSample
//
//  Created by Ali Samaiee on 8/10/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class SelectCountriesWorker {
    let memoryDataProvider: CountryMemoryDataProvider
    let networkDataProvider: CountryNetworkDataProvider
    let mapper: CountryToViewSelectCountry
    
    init(memoryCountryProvider: CountryMemoryDataProvider, networkDataProvider: CountryNetworkDataProvider) {
        self.memoryDataProvider = memoryCountryProvider
        self.networkDataProvider = networkDataProvider
        self.mapper = CountryToViewSelectCountry()
    }
    
    func fetchCountries(fetchRequest: SelectCountries.Request.Fetch, result: @escaping (SelectCountries.Response.FetchCountry) -> Void) {
        let networkFetch = { [weak self] in
            guard let self = self else { return }
            let networkResult = self.networkDataProvider.getAll()
            switch networkResult {
            case .Success(let networkCountries):
                for country in networkCountries {
                    _ = self.memoryDataProvider.put(key: country.key, value: country)
                }
                result(SelectCountries.Response.FetchCountry(countries: self.mapper.map(listOf: networkCountries), error: nil))
            case .Failed(let error):
                result(SelectCountries.Response.FetchCountry(countries: nil, error: error))
            }
        }
        
        let memoryResult = self.memoryDataProvider.getAll()
        switch memoryResult {
        case .Success(let memoryCountries):
            if memoryCountries.isEmpty {
                // Go for remote data provider
                DispatchQueue.global(qos: .background).async {
                    networkFetch()
                }
            } else {
                result(SelectCountries.Response.FetchCountry(countries: mapper.map(listOf: memoryCountries), error: nil))
            }
        case .Failed(let error):
            result(SelectCountries.Response.FetchCountry(countries: nil, error: error))
        }
    }

    func toggleCountrySelected(toggleRequest: SelectCountries.Request.ToggleSelected, result: (SelectCountries.Response.ToggleCountry) -> Void) {
        let getRes = self.memoryDataProvider.get(key: toggleRequest.key)
        
        switch getRes {
        case .Success(var country):
            country.selected = !country.selected
            _ = self.memoryDataProvider.put(key: toggleRequest.key, value: country)
            result(SelectCountries.Response.ToggleCountry(name: country.name, selected: country.selected, success: true, error: nil))
        case .Failed(let error):
            result(SelectCountries.Response.ToggleCountry(name: toggleRequest.key, selected: false, success: false, error: error))
        }
    }
}
