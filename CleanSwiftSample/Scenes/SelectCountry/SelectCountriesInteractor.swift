//
//  SelectCountriesInteractor.swift
//  CleanSwiftSample
//
//  Created by Ali Samaiee on 8/10/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelectCountriesBusinessLogic {
    /// Presenter will provide response for this request using delegate
    func fetchCountries(request: SelectCountries.Request.Fetch)
    func toggleCountry(request: SelectCountries.Request.ToggleSelected)
}

class SelectCountriesInteractor {
    var presenter: SelectCountriesPresentationLogic?
    var worker: SelectCountriesWorker?
    
    init() {
        let localDataProvider = DataProviders.shared.countryMemoryDataProvider
        let remoteDataProvider = DataProviders.shared.countryNetowrkDataProvider
        self.worker = SelectCountriesWorker(memoryCountryProvider: localDataProvider, networkDataProvider: remoteDataProvider)
    }
}

extension SelectCountriesInteractor: SelectCountriesBusinessLogic {
    func toggleCountry(request: SelectCountries.Request.ToggleSelected) {
        self.worker?.toggleCountrySelected(toggleRequest: request, result: { [weak self] (toggleCountryResponse) in
            guard let self = self else { return }
            self.presenter?.present(update: toggleCountryResponse)
            DispatchQueue.main.async {
                NotificationManager.sharedInstance.postNotificationName(NotificationManager.selectedCountriesChanged, [])
            }
        })
    }

    func fetchCountries(request: SelectCountries.Request.Fetch) {
        self.presenter?.setProgress(visibility: true)
        self.worker?.fetchCountries(fetchRequest: request, result: { [weak self] (countriesResponse) in
            guard let self = self else { return }
            self.presenter?.setProgress(visibility: false)
            guard let countries = countriesResponse.countries, countriesResponse.error == nil else {
                if let strongError = countriesResponse.error {
                    Logger.printToConsole("SelectCountriesInteractor -> fetchCoutries Error: \(strongError)")
                    self.presenter?.present(error: strongError)
                } else {
                    Logger.printToConsole("SelectCountriesInteractor -> fetchCoutries: empty country list")
                }
                return
            }
            let filteredCountries = (request.filter.isEmpty) ? countries : countries.filter { (country) -> Bool in
                return country.name.lowercased().contains(request.filter.lowercased())
            }
            self.presenter?.present(countries: SelectCountries.Response.FetchCountry(countries: filteredCountries, error: nil))
        })
    }
}
