//
//  SelectCountriesViewController.swift
//  CleanSwiftSample
//
//  Created by Ali Samaiee on 8/10/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD

protocol SelectCountriesDisplayLogic: class {
    func reloadData(viewModel: SelectCountries.ViewModel.ReloadCountries)
    func updateCell(with: SelectCountries.ViewModel.Country)
    func setProgress(visibility: Bool)
    func showAlert(message: String)
}

class SelectCountriesViewController: UIViewController {
    var interactor: SelectCountriesBusinessLogic?
    var router: (NSObjectProtocol & SelectCountriesRoutingLogic)?
    
    /**
     Title: SelectionState
     To be used as table data source; updates will be applied to this dict throgh Presenter.
     */
    private var items = [SelectCountries.ViewModel.Country]()
    private var lastSearchQuery: String = ""
    
    // MARK: UI Components
    
    let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        
        return tableView
    }()
    
    var searchController: UISearchController = {
        let placeholderText = LanguageManager.getStringValue(forKey: LanguageManager.search_for_countries, defaultValue: "Search for countries")
        
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.placeholder = placeholderText
        
        return searchController
    }()
    
    let doneButton: UIButton = {
        let doneText = LanguageManager.getStringValue(forKey: LanguageManager.done, defaultValue: "Done")
        
        let button = UIButton()
        button.setTitle(doneText, for: .normal)
        button.titleLabel?.textAlignment = .center
        button.translatesAutoresizingMaskIntoConstraints = false
        button.contentMode = .center
        button.layer.masksToBounds = true
        button.layer.cornerRadius = 12
        button.backgroundColor = .ocean
        
        return button
    }()
    
    let progressHud: MBProgressHUD = {
        let hud = MBProgressHUD()
        hud.isHidden = true
        
        return hud
    }()
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SelectCountriesInteractor()
        let presenter = SelectCountriesPresenter()
        let router = SelectCountriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        
        self.setupViews()
    }
    
    private func setupViews() {
        // Colors
        self.view.backgroundColor = .smoke
        self.tableView.backgroundColor = .smoke
        
        // Subviews
        self.view.addSubview(tableView)
        self.view.addSubview(doneButton)
        
        // Gestures and targets
        self.doneButton.addTarget(self, action: #selector(self.doneButtonAction), for: .touchUpInside)
        
        // Layout
        self.tableView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        self.tableView.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor).isActive = true
        self.tableView.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor).isActive = true
        self.tableView.bottomAnchor.constraint(equalTo: self.doneButton.topAnchor, constant: -12).isActive = true
        
        self.doneButton.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -32).isActive = true
        self.doneButton.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        self.doneButton.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        self.doneButton.heightAnchor.constraint(equalToConstant: 64).isActive = true
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.searchController.searchResultsUpdater = self
        self.navigationItem.searchController = self.searchController
        self.navigationItem.hidesSearchBarWhenScrolling = false
        
        self.tableView.separatorStyle = .none
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.register(SelectCountriesTableViewCell.self, forCellReuseIdentifier: "SelectCountriesTableViewCell")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.interactor?.fetchCountries(request: SelectCountries.Request.Fetch(filter: ""))
        }
        
        self.title = LanguageManager.getStringValue(forKey: LanguageManager.select_countries, defaultValue: "Select Countries")
    }
    
    @objc func doneButtonAction() {
        self.router?.popViewController()
    }
}

// MARK: TableView Delegate & DataSource extension

extension SelectCountriesViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let item = self.items[safe: indexPath.row], let strongCell = tableView.dequeueReusableCell(withIdentifier: "SelectCountriesTableViewCell") as? SelectCountriesTableViewCell {
            strongCell.update(title: item.title, selected: item.selected)
            return strongCell
        } else {
            Logger.printToConsole("SelectCountriesViewController -> tableViewCellForRowAt: related item not found for indexPath; putting blank cell in table to avoid crash.")
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let strongItem = self.items[safe: indexPath.row] else { return }
        self.interactor?.toggleCountry(request: SelectCountries.Request.ToggleSelected(key: strongItem.title.lowercased()))
    }
}

// MARK: Presenter output handlers

extension SelectCountriesViewController: SelectCountriesDisplayLogic {
    func setProgress(visibility: Bool) {
        if visibility {
            MBProgressHUD.showAdded(to: self.parent?.view ?? self.view, animated: true)
        } else {
            MBProgressHUD.hide(for: self.parent?.view ?? self.view, animated: true)
        }
    }
    
    func showAlert(message: String) {
        let okText = LanguageManager.getStringValue(forKey: LanguageManager.ok, defaultValue: "OK")
        
        let alert = UIAlertController(title: message, message: nil, preferredStyle: .alert)
        let okAction = UIAlertAction(title: okText, style: .default) { [weak self] (_) in
            self?.router?.popViewController()
        }
        alert.popoverPresentationController?.sourceView = self.view
        alert.popoverPresentationController?.sourceRect = CGRect(x: self.view.bounds.size.width / 2.0, y: self.view.bounds.size.height / 2.0, width: 1.0, height: 1.0)
        alert.popoverPresentationController?.permittedArrowDirections = .init(rawValue: 0)
        alert.addAction(okAction)
        self.present(alert, animated: true, completion: nil)
    }
    
    func reloadData(viewModel: SelectCountries.ViewModel.ReloadCountries) {
        self.items = viewModel.countries
        tableView.reloadData()
    }
    
    func updateCell(with: SelectCountries.ViewModel.Country) {
        tableView.beginUpdates()
        var relatedIndex: Int?
        for (index, item) in items.enumerated() {
            if item.title == with.title {
                relatedIndex = index
                break
            }
        }
        
        if let strongRowIndex = relatedIndex {
            self.items[strongRowIndex] = with
            let indexPath = IndexPath(row: strongRowIndex, section: 0)
            self.tableView.reloadRows(at: [indexPath], with: .none)
        }
        tableView.endUpdates()
    }
}

// MARK: Search controller extension

extension SelectCountriesViewController: UISearchResultsUpdating {
    
    func updateSearchResults(for searchController: UISearchController) {
        let searchText = searchController.searchBar.text ?? ""
        NSObject.cancelPreviousPerformRequests(withTarget: self, selector: #selector(self.searchCountry(_:)), object: self.lastSearchQuery)
        if lastSearchQuery == searchText { return }
        self.lastSearchQuery = searchText
        perform(#selector(self.searchCountry(_:)), with: lastSearchQuery, afterDelay: 0.25)
    }
    
    @objc func searchCountry(_ query: String) {
        Logger.printToConsole("SelectCountriesViewController -> UISearchResultsUpdating -> searchCountry -> gonna perform search query: \(query)")
        self.interactor?.fetchCountries(request: SelectCountries.Request.Fetch(filter: query))
    }
}
