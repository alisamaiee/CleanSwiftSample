//
//  CountriesInteractor.swift
//  CleanSwiftSample
//
//  Created by Ali Samaiee on 8/9/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountriesBusinessLogic {
    func fetchSelectedCountries()
}

class CountriesInteractor {
    var presenter: CountriesPresentationLogic?
    var worker: CountriesWorker
    
    init() {
        let dataProvider = DataProviders.shared.countryMemoryDataProvider
        self.worker = CountriesWorker(countryMemoryProvider: dataProvider)
        
        // No need to remove observer since we are always looking for new updates here
        try? NotificationManager.sharedInstance.addObserver(self, NotificationManager.selectedCountriesChanged)
    }
}

// MARK: Worker's delegate

extension CountriesInteractor: CountriesBusinessLogic {
    func fetchSelectedCountries() {
        let allCountries = self.worker.getCountries()
        let selectedCountries = allCountries!.filter({ (country) -> Bool in
            return country.selected
        })
        self.presenter?.presentSelectedCountries(response: selectedCountries)
    }
}

// MARK: Event handler delegate

extension CountriesInteractor: NotificationCenterDelegate {
    func didReceivedNotification(_ id: Int, args: [Any]) {
        if id == NotificationManager.selectedCountriesChanged {
            // Refresh data
            self.fetchSelectedCountries()
        }
    }
}
