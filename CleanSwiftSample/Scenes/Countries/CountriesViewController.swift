//
//  CountriesViewController.swift
//  CleanSwiftSample
//
//  Created by Ali Samaiee on 8/9/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountriesDisplayLogic: class {
    func updateTextView(withData: Countries.ViewModel)
}

class CountriesViewController: UIViewController, CountriesDisplayLogic {
    var interactor: CountriesBusinessLogic?
    var router: (NSObjectProtocol & CountriesRoutingLogic)?
    
    // MARK: UI Components
    
    let descriptionLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textAlignment = .center
        label.font = .caption1Font
        label.textColor = .hurricane
        label.text = LanguageManager.getStringValue(forKey: LanguageManager.your_selected_countries_are_here, defaultValue: "Your selected countries are here")
        
        return label
    }()
    
    let countriesTextView: UITextView = {
        let textView = UITextView()
        textView.translatesAutoresizingMaskIntoConstraints = false
        textView.isEditable = false
        textView.layer.masksToBounds = true
        textView.layer.cornerRadius = 6
        textView.layer.borderWidth = 2
        textView.layer.borderColor = UIColor.ocean.cgColor
        textView.backgroundColor = .contrastedBack
        textView.textColor = .contrastedText
        textView.font = .title1Font
        
        return textView
    }()
    
    let chooseButton: UIButton = {
        let chooseText = LanguageManager.getStringValue(forKey: LanguageManager.choose, defaultValue: "Choose")
        
        let button = UIButton()
        button.setTitle(chooseText, for: .normal)
        button.titleLabel?.textAlignment = .center
        button.translatesAutoresizingMaskIntoConstraints = false
        button.contentMode = .center
        button.layer.masksToBounds = true
        button.layer.cornerRadius = 12
        button.backgroundColor = .ocean
        
        return button
    }()
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CountriesInteractor()
        let presenter = CountriesPresenter()
        let router = CountriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        
        self.setupViews()
    }
    
    /// To add subviews, gestures, layouting etc.
    private func setupViews() {
        // Colors
        self.view.backgroundColor = .smoke
        
        // Subviews
        self.view.addSubview(descriptionLabel)
        self.view.addSubview(countriesTextView)
        self.view.addSubview(chooseButton)
        
        // Gestures and targets
        self.chooseButton.addTarget(self, action: #selector(self.chooseButtonAction), for: .touchUpInside)
        
        // Layout
        self.descriptionLabel.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor, constant: 32).isActive = true
        self.descriptionLabel.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        self.descriptionLabel.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        self.descriptionLabel.heightAnchor.constraint(equalToConstant: 20).isActive = true
        
        self.countriesTextView.topAnchor.constraint(equalTo: self.descriptionLabel.bottomAnchor, constant: 64).isActive = true
        self.countriesTextView.bottomAnchor.constraint(equalTo: self.chooseButton.topAnchor, constant: -64).isActive = true
        self.countriesTextView.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        self.countriesTextView.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        
        self.chooseButton.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -32).isActive = true
        self.chooseButton.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        self.chooseButton.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        self.chooseButton.heightAnchor.constraint(equalToConstant: 64).isActive = true
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = LanguageManager.getStringValue(forKey: LanguageManager.countries, defaultValue: "Countries")
    }
    
    @objc func chooseButtonAction() {
        let selectCountryVC = SelectCountriesViewController()
        self.router?.navigateTo(vc: selectCountryVC)
    }
    
    func updateTextView(withData: Countries.ViewModel) {
        self.countriesTextView.text = withData.countries.joined(separator: ", ")
    }
}
